Dev Notes:
-allow user to input events directly from calendar view? (eg right click on day and type event)
-format for storing and receiving dates: 'yyyy-MM-dd'


REACT (frontend/UI):
- react uses jsx, which allows html to be written as part of a javascript script
    - ive seen html being returned so far usually
    - allows JS logic in html

    HTML:
        -div tag (<div ____> </div>)
            -a div element takes up full available with, and starts on a new line
            -easy to group related things/keep things on same level of DOM
            -flexible container
            -import a matching css file for ez styling
        -ul tag
            -makes a list without any elements
            -elements are added with li
            -makes it so new list items can be easily added and removed


    COMPONENTS:
        -export default components 

    
    REACT FUNCTIONS:
        -useEffect(function, dependency (optional))
            -the dependency determines how often it runs
                -if the dependency variable changes, the effect will re-run
                -no dependency runs on every render
                -[] makes it only run once
        -useState(initialState)
            -used to add state variable to component
            -const [state, setState] = useState(initialState)
        -can pass a function from one component to another that then returns data to original component
            

    ROUTING/LINKING:
        -import {} from 'react-router-dom'
        -this allows urls to be used as part of app
            -can create links that have returns, etc
        -wrap return statement of App.js in <Router>
        -wrap individual Route(s) with <Routes>
        -<Route path="PATHNAME" element = {<COMPONENT />}
        -useParams allows program to use URL params
        -only one route with the same path can be rendered at a time
            -if you want a component to appear on all pages (ie navbar), don't include it in your routes

    LIMITATIONS:
        -react cannot render objects or arrays directly as children in jsx
            -can render strings, nums, react components, arrays of valid items
            -NO OBJECTS RENDERED
            -to render objects (such as an array of events), map over array and access properties of each event.
                -essentially, access the smallest part or react component


CSS (Cascading Style Sheets!):
    -creating a css file for each JS component allows ezpz styling
    -a{} is used to style links
    -common styling
        -display: (changes format and rendering)
        -

EXPRESS + MONGODB (backend):

    STARTING:

    COMMUNICATION:
        -app.get('/', (req, res) => {
	        res.send('SERVER UPPPPPP');
         });
        -app.get
            -links with frontend
            -req and res for request and response
        -res.send
            -sends message to frontend
    
    MONGODB+API
        -POST requests creates new documents
        -PUT updates documents
        -DELETE deletes documents
        -GET fetches data



JSON (JavaScript Object Notation):
    -JSON is a lightweight format for storing + transporting data
    -commonly used for sending data from server to webpage
    -the json on client side using JSON.parse
        -ie var obj = JSON.parse()
    -json() returns promise that resolves to json object
    -follows object notation format (classes, descriptions, etc)
    
    

FRONTEND/BACKEND COMMUNICATION:
-communication happens through API calls (application programming interface)
    -essentially, application sends message to API endpoint in server
    -endpoint checks request and responds
    -response gives info about request result
        -response codes(200: success, 400: invalid, 401: unauthorized, 403: forbidden, 404: requested resource doesn't exist)
    FETCHING:

    USER ADDING EVENT:

    BACKEND:

GIT/GITHUB:
    -git is version control
        
        -can commit changes when ready
            -git add ___ 
                -use (.) or project directory to add whole project
                -stages the file/s
            -git commit -m ""
                --m adds a message
                - commits to git
            -git push origin main
                -pushes to the main branch in github
                -can push to different branches

        -can view version history
            -git log
            -git log path (specific file)
            -git log --oneline (more compact)
            -q to quit
            -VERY useful for finding old versions and their commit-hash
            -git status shows currently staged files
        
        -can restore old versions
            -git checkout <commit-hash> -- path/to/your/file
                -restores one or multiple files
            -git reset (flag) <commit-hash>
                -restores entire project to prev commit
                -(--soft) keeps working directory changes but undoes commits
                -(--hard) completely restores repository to commit state, discarding changes made after
            -git revert <commit-hash>
                -undoes a specific commit w/out reqriting history
        
        -vscode also has a handy git ui (Source Control)

        -restoring to latest version
            -discard all changes in vscode source control
            -git checkout -- .
                -discards uncommitted changes
            -stash and restore changes
                -git stash
                -git stash pop

DATE-FNS
-date library
-imports:
    -format (formatting options for dates)
        -lots of different formatting options
        -'MM-dd-yyyy' is general style
        -MMMM gives full month name
        -EEEE full day name (like monday)
    -startOfMonth
    -endOfMonth
    -addDay,
    -etc


MongoDB
-document database for app development & the cloud
-stores data as JSON documents
    -can be nested to express hierarchy

        